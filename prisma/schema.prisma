// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  DEFAULT
  ADMIN
}

model User {
  id                     String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                   String?
  email                  String    @unique
  emailVerified          DateTime?
  image                  String?
  role                   UserRole  @default(DEFAULT)
  password               String?
  isTwoFactorAuthEnabled Boolean   @default(false)
  twoFactorAuthVerified  DateTime?
  accounts               Account[]
  sheets                 Sheet[]
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
}

model Sheet {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id      String   @db.Uuid
  date         DateTime @db.Date
  local        String   @db.VarChar(100)
  start_time   String @db.VarChar(10)
  end_time     String @db.VarChar(10)
  lunch_start  String @db.VarChar(10)
  lunch_end    String @db.VarChar(10)
  return_lunch String @db.VarChar(10)
  end_work     String @db.VarChar(10)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  users        User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Account {
  userId            String @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id      String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
